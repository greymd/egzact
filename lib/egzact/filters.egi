def PHOLDER := "\\*"

def filterPlain str line := [line]

def filterAddl str line := [str :: line]

def filterAddr str line := [line ++ [str]]

def filterMirror str line := [reverse line]

def filterObrev str line := [line, reverse line]

def filterCycle num line :=
  matchAll line as list string with
    | ($x & _) ++ ($xs & ![]) -> (concat [xs, x])

def filterComb num line :=
  let minNum := min num (length line)
   in matchAll line as list string with
        | loop $i (1, minNum)
            (_ ++ $a_i :: ...)
            _ -> map 1#a_%1 (between 1 minNum)

def filterPerm num line :=
  let minNum := min num (length line)
   in matchAll line as multiset string with
        | loop $i (1, minNum, _)
            ($a_i :: ...)
            _ -> map 1#a_%1 (between 1 minNum)

def filterConvEach num line := filterConv (min num (length line)) line

def filterConv num line :=
  matchAll line as list string with
    | _ ++ (loop $i (1, num, _)
              ($a_i :: ...)
              _) -> map 1#a_%1 (between 1 num)

def filterDupl num line := take num (repeat1 line)

def filterFlat num line :=
  match line as list string with
    | loop $i (1, num, _)
        ($a_i :: ...)
        $xs -> map 1#a_%1 (between 1 num) :: filterFlat num xs
    | $x ++ $xs :: [] -> [x ++ [xs]]
    | [] -> []

def filterSlit num line :=
  let execPartition partNums ls :=
        match ls as list integer with
          | [] -> []
          | loop $n (1, head partNums, _)
              ($a_n :: ...)
              $rest ->
            concat
              [ [map 1#a_%1 (between 1 (head partNums))]
              , execPartition (tail partNums) rest ]
   in execPartition (equalizedPartitionNums (length line) num) line

-- Devide a number into the collection which has "num-length" of elements.
-- Returns a "integer partition" which equalized each element as much as possible.
-- equalizedPartitionNums 100 10 -- => [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
-- equalizedPartitionNums 100 6; => [17, 17, 17, 17, 16, 16]
def equalizedPartitionNums num numLength :=
  let upperNum := ceiling (rtof (num / numLength))
      lowerNum := upperNum - 1
      lowerNumCount := upperNum * numLength - num
      upperNumCount := numLength - lowerNumCount
   in concat
        [ take upperNumCount (repeat1 upperNum)
        , take lowerNumCount (repeat1 lowerNum) ]

def filterSublist empty line :=
  matchAll line as list string with
    | _ ++ ($x & ![]) ++ _ -> x

def filterSubset empty line :=
  matchAll line as set string with
    | ($x & ![]) ++ _ -> x

def filterStairl empty line :=
  matchAll line as list string with
    | ($x & ![]) ++ $xs -> (x)

def filterStairr empty line :=
  matchAll line as list string with
    | nioj ($x & ![]) $xs -> (x)

def filterTakel num line :=
  let minNum := min num (length line)
   in [(take minNum line)]

def filterTaker num line :=
  let minNum := min num (length line)
   in [drop (length line - minNum) line]

def filterTakelx str line :=
  [ match line as list string with
    | $left ++ ($elem & ?1#(not (isEmpty (regex str %1))) & ![]) :: _ ->
      left ++ [elem]
    | _ -> [] ]

def filterTakerx str line :=
  [ match line as list string with
    | nioj $right (snoc ($elem & ?1#(not (isEmpty (regex str %1))) & ![]) _) ->
      [elem] ++ right
    | _ -> [] ]

def filterDropl num line :=
  let minNum := min num (length line)
   in [drop minNum line]

def filterDropr num line :=
  let minNum := min num (length line)
   in [take (length line - minNum) line]

def filterZrep str line :=
  [ match line as list string with
    | $left ++ ($elem & ?1#(not (isEmpty (regex str %1))) & ![]) :: $right ->
      concat ([elem] :: filterZrep str right)
    | _ -> [] ]

def filterZniq str line := [uniqueAs string line]

def filterWrap str line :=
  let (pre, pl, suf) := head (regex PHOLDER str)
   in filterWrapImpl pre suf line

def filterWrapImpl pre suf line :=
  [ match line as list string with
    | _ ++ $elem :: $right ->
      concat ([S.concat [pre, elem, suf]] :: filterWrapImpl pre suf right)
    | _ -> [] ]

def filterNestl str line :=
  let (pre, pl, suf) := head (regex PHOLDER str)
   in [foldl 2#(concat [[pre], %1, [%2], [suf]]) [] line]

def filterNestr str line :=
  let (pre, pl, suf) := head (regex PHOLDER str)
   in [foldr 2#(concat [[pre], [%1], %2, [suf]]) [] line]

-- > removeEmptyElement ["11","22",[],"1"]
-- ["11", "22", "1"]
def removeEmptyElement results := filter 1#(not (isEmpty %1)) results

-- > extractMachedStr [[("123","AAA","")],[("","BBB","")]]
-- [["AAA"], ["BBB"]]
def extractMachedStr results := map (\(_, elem, _) -> [elem]) (map 1#(head %1) results)

-- > filterCrops "1.1$" ["123","131","222"]
-- [["131"]]
def filterCrops str line :=
  uniqueAs (list string)
    (extractMachedStr
       (removeEmptyElement
          (matchAll line as list string with
            | _ ++ ($x & ![]) ++ _ -> regex str (S.concat x))))
