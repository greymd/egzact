def ARGMAX := 65535

def S.isNats str := not (isEmpty (regex "^[1-9][0-9]*$" str))

def argsCheckOpts := \opts => (~opts & ?checkOpts) ++ []

def argsCheckOptsNum :=
  \opts arg => (~opts & ?checkOpts) ++ (~arg & ?S.isNats) :: []

def argsCheckOptsStr := \opts arg => (~opts & ?checkOpts) ++ ~arg :: []

def checkOpts opts :=
  match opts as (list string) with
    | [] -> True
    | loop $n (1, length opts, _)
        (?1#(not (isEmpty (regex "=" %1))) :: ...)
        [] -> True
    | _ -> False

def numValidation num :=
  if isInteger num
    then if num > 0 then min num ARGMAX else ARGMAX
    else if isString num then min (read num) ARGMAX else ARGMAX

def optionUsage :=
  do print "OPTIONS:"
     print "    fs=STR     Field separator."
     print "    ifs=STR    Input field separator."
     print "    ofs=STR    Output field separator."
     print "    eor=STR    End of record."
     print "    eos=STR    End of set."

def optionUsage2 :=
  do print "OPTIONS:"
     print "    eor=STR    End of record."
     print "    eos=STR    End of set."

def execution thisPrinter thisFilter thisOpts thisArg thisInput :=
  let (ifs, ofs, eor, eos, eof) := setDefaultOpts (opts2hash thisOpts)
   in thisPrinter thisFilter thisArg ifs ofs eor eos eof thisInput


-- Set default value of each command line options.
def setDefaultOpts opts :=
  ( setDefaultValue [opts "ifs", opts "fs", " "] -- input field separator
  , setDefaultValue [opts "ofs", opts "fs", " "] -- output field separator
  , setDefaultValue [opts "eor", "\n"]           -- output row separator
  , setDefaultValue2 [opts "eos", "\n"]          -- output set separator
  , setDefaultValue [opts "eof", "\n"] )         -- end of file

-- Infinite input stream
def stdin := takeWhile 1#(not (EOF = %1)) (recursiveRead readLine)

def recursiveRead proc :=
  (if io (isEof ()) then EOF else io (proc ())) :: recursiveRead proc

-- Print whole the input stream with specified fieds.
def printWholeInput filter args ifs ofs eor eos eof inf :=
  each
    1#(write (S.append (joinString ofs %1) eor))
    (filter args (splitWholeInput ifs inf))

-- Print each lines with specified fields.
def printEachLine filter args ifs ofs eor eos eof inf :=
  each
    write
    (intersperse2
       eos
       (map
         1#(twocol2string ofs eor %1)
          (map 1#(filter args %1) (splitEachLine ifs inf))) ++ [eof])

-- Returns the string which is found most early.
def setDefaultValue ls :=
  match ls as list something with
    | _ ++ ($x & !#() & ?isString) :: $xs -> (x)

-- When the first element is string, put it between new lines.
def setDefaultValue2 ls :=
  match ls as list something with
    | ($x & !#() & ?isString) :: $xs -> (S.concat ["\n", x, "\n"])
    | _ -> (setDefaultValue ls)

-- Define Hash<String, String>
-- Convert string collection to function which acts like key-value hash.
-- ["P1=A","P2=B"]
-- match as something with
-- | #"P1" -> "A"
-- | #"P2" -> "B"
-- Example:
-- > myhash := opts2hash ["A=B", "C=D"]
-- > myhash "A"
-- > "B"
def opts2hash args :=
    read $ S.concat [ "\\match as something with\n"
    , S.concat (map 1#(let (key, _, val) := head (regex "=" %1)
                        in (S.concat ["  | #", show key, " -> ", show val, "\n"])) args)
    , "  | _ -> []\n"
    ]

-- Convert two-dimensional-collection to string
-- > twocol2string "-" "@" [["a","b","c"],["d","e","f"],["g"]] -- => "a-b-c@d-e-f@g"
def twocol2string fieldSep rowSep cols :=
  joinString rowSep (map 1#(joinString fieldSep %1) cols)

-- Escape particular character
-- Example: escaping "a" character.
-- > (escapeChars 'a') ['a','b','c','a','b','d'] -- => ['\', 'a', 'b', 'c', '\', 'a', 'b', 'd']
def escapeChars target :=
  \match as list char with
    | [] -> []
    | ($c & #target) :: $cs -> ['\\', c] ++ (escapeChars target) cs
    | $c :: $cs -> [c] ++ (escapeChars target) cs

-- joinString "," ["a","b","c"] -- "a,b,c"
def joinString fs ls :=
  match ls as list string with
    | [] -> ""
    | ($lst & ?isString) :: [] -> lst
    | $x :: $xs -> (S.append (S.append x fs) (joinString fs xs))

-- new split-string function which can deal with empty separator
def S.split2 delim ls :=
  if S.isEmpty delim then map 1#(pack [%1]) (unpack ls) else S.split delim ls

-- splitWholeInput " " ["a b c","1 2 3"] -- => ["a","b","c","1","2","3"]
def splitWholeInput str line :=
  match line as list string with
    | [] -> []
    | $x :: $xs -> concat [S.split2 str x, splitWholeInput str xs]

-- splitEachLine " " ["a b c","1 2 3"] --  => [["a", "b", "c"], ["1", "2", "3"]]
-- splitEachLine ""  ["a b c","1 2 3"] -- => [["a", " ", "b", " ", "c"], ["1", " ", "2", " ", "3"]]
def splitEachLine str line :=
  match line as list string with
    | [] -> []
    | $x :: $xs -> [S.split2 str x] ++ splitEachLine str xs

-- The behavior is same as intersperse.
-- But it works even the input is infinite stream.
-- intersperse2 "---" ["a b c","1 2 3","e f g"] -- => ["a b c", "---", "1 2 3", "---", "e f g"]
def intersperse2 str line :=
  match line as list string with
    | $x :: [] -> [x]
    | $x :: $xs -> ([x] ++ [str]) ++ intersperse2 str xs -- first and before last element
