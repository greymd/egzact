--
-- This file has been auto-generated by egison-translator.
--

loadFile "./lib/egzact/utils.egi"

assertEqual
  (debug "check-opts -- case 1")
  (checkOpts ["A=B", "B=3", "C=143"])
  True

assertEqual
  (debug "check-opts -- case 2")
  (checkOpts ["A=B", "B=3", "143"])
  False

assertEqual (debug "check-opts -- case 3") (checkOpts ["fs=\n"]) True

assertEqual (debug "check-opts -- case 4") (checkOpts []) True

assertEqual (debug "check-opts -- case 5") (checkOpts ["A"]) False

assertEqual (debug "num-validation -- case 1") (numValidation 5) 5

assertEqual (debug "num-validation -- case 2") (numValidation 0) ARGMAX

assertEqual
  (debug "num-validation -- case 3")
  (numValidation 100000000000)
  ARGMAX

assertEqual (debug "num-validation -- case 4") (numValidation (-1)) ARGMAX

assertEqual (debug "num-validation -- case 5") (numValidation ()) ARGMAX

assertEqual (debug "num-validation -- case 6") (numValidation "10") 10

assertEqual
  (debug "num-validation -- case 7")
  (numValidation "10000000000")
  ARGMAX

assertEqual (debug "S.isNats -- case 1") (S.isNats "100000000") True

assertEqual (debug "S.isNats -- case 2") (S.isNats "1a") False

assertEqual (debug "S.isNats -- case 3") (S.isNats "02") False

assertEqual (debug "S.isNats -- case 4") (S.isNats "1") True

assertEqual (debug "num-validation -- case 8") (numValidation y) ARGMAX

assertEqual
  (debug "join-string -- case 1")
  (joinString "," ["a", "b", "c"])
  "a,b,c"

assertEqual (debug "join-string -- case 2") (joinString "," ["a"]) "a"

assertEqual (debug "join-string -- case 3") (joinString "," []) ""

assertEqual
  (debug "split-whole-input")
  (splitWholeInput " " ["a b c", "1 2 3 4"])
  ["a", "b", "c", "1", "2", "3", "4"]

assertEqual
  (debug "split-each-line -- case 1")
  (splitEachLine " " ["a b c", "1 2 3"])
  [["a", "b", "c"], ["1", "2", "3"]]

assertEqual
  (debug "split-each-line -- case 2")
  (splitEachLine "" ["ab bc", "12 3"])
  [["a", "b", " ", "b", "c"], ["1", "2", " ", "3"]]

assertEqual
  (debug "opts2hash -- case 1")
  ((opts2hash ["P1=A", "P2=B"]) "P1")
  "A"

assertEqual (debug "opts2hash -- case 2") ((opts2hash ["P1=A", "P2="]) "P2") ""

assertEqual
  (debug "twocol2string -- case 1")
  (twocol2string "-" "@" [["a", "b", "c"], ["d", "e", "f"], ["g"]])
  "a-b-c@d-e-f@g"

assertEqual
  (debug "twocol2string -- case 2")
  (twocol2string "-" "@" [[], []])
  "@"

assertEqual
  (debug "twocol2string -- case 3")
  (twocol2string "-" "@" [[], [], []])
  "@@"

assertEqual (debug "twocol2string -- case 4") (twocol2string "-" "@" []) ""

assertEqual
  (debug "escape-chars")
  ((escapeChars 'a') ['a', 'b', 'c', 'a', 'b', 'd'])
  ['\\', 'a', 'b', 'c', '\\', 'a', 'b', 'd']

assertEqual
  (debug "set-default-opts -- case 1")
  (setDefaultOpts
     (\match as something with
       | #"eof" -> "AAA"
       | #"ifs" -> "BBB"
       | #"eos" -> "---"
       | _ -> []))
  ("BBB", " ", "\n", "\n---\n", "AAA")

assertEqual
  (debug "set-default-opts -- case 2")
  (setDefaultOpts
     (\match as something with
       | #"dummy" -> "1"
       | _ -> []))
  (" ", " ", "\n", "\n", "\n")

assertEqual
  (debug "set-default-value -- case 1")
  (setDefaultValue ["A", "B", "C"])
  "A"

assertEqual
  (debug "set-default-value -- case 2")
  (setDefaultValue [(), "B", "C"])
  "B"

assertEqual
  (debug "set-default-value -- case 3")
  (setDefaultValue [(), (), "C"])
  "C"

assertEqual
  (debug "set-default-value -- case 4")
  (setDefaultValue ["A", (), "C"])
  "A"

assertEqual
  (debug "set-default-value2 -- case 1")
  (setDefaultValue2 [(), "C"])
  "C"

assertEqual
  (debug "set-default-value2 -- case 2")
  (setDefaultValue2 ["A", "B"])
  "\nA\n"

assertEqual
  (debug "set-default-value2 -- case 3")
  (setDefaultValue2 ["A"])
  "\nA\n"

assertEqual
  (debug "S.split2 -- case 1")
  (S.split2 " " "a b c")
  (S.split " " "a b c")

assertEqual
  (debug "S.split2 -- case 2")
  (S.split2 "" "a b c")
  ["a", " ", "b", " ", "c"]

assertEqual
  (debug "intersperse2")
  (intersperse2 "---" ["a b c", "1 2 3", "e f g"])
  ["a b c", "---", "1 2 3", "---", "e f g"]
