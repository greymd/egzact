--
-- This file has been auto-generated by egison-translator.
--

loadFile "./lib/egzact/filters.egi"

assertEqual
  (debug "plain")
  (filterPlain "" ["a", "b", "c", "d"])
  [["a", "b", "c", "d"]]

assertEqual
  (debug "addl")
  (filterAddl "A" ["a", "b", "c", "d"])
  [["A", "a", "b", "c", "d"]]

assertEqual
  (debug "addr")
  (filterAddr "B" ["a", "b", "c", "d"])
  [["a", "b", "c", "d", "B"]]

assertEqual
  (debug "crops")
  (filterCrops "1.*1" ["1", "1", "1", "0", "1", "0", "0", "1", "1", "0"])
  [ ["11"]
  , ["111"]
  , ["11101"]
  , ["1101"]
  , ["101"]
  , ["11101001"]
  , ["1101001"]
  , ["101001"]
  , ["1001"]
  , ["111010011"]
  , ["11010011"]
  , ["1010011"]
  , ["10011"] ]

assertEqual
  (debug "cycle")
  (filterCycle "" ["a", "b", "c", "d"])
  [ ["a", "b", "c", "d"]
  , ["b", "c", "d", "a"]
  , ["c", "d", "a", "b"]
  , ["d", "a", "b", "c"] ]

assertEqual
  (debug "comb")
  (filterComb 2 ["a", "b", "c", "d"])
  [["a", "b"], ["a", "c"], ["b", "c"], ["a", "d"], ["b", "d"], ["c", "d"]]

assertEqual
  (debug "conv")
  (filterConv 2 ["a", "b", "c", "d"])
  [["a", "b"], ["b", "c"], ["c", "d"]]

assertEqual
  (debug "conv-each")
  (filterConvEach 5 ["a", "b", "c", "d"])
  [["a", "b", "c", "d"]]

assertEqual
  (debug "dupl")
  (filterDupl 3 ["a", "b", "c", "d"])
  [["a", "b", "c", "d"], ["a", "b", "c", "d"], ["a", "b", "c", "d"]]

assertEqual
  (debug "flat")
  (filterFlat 3 ["a", "b", "c", "d", "e", "f", "g"])
  [["a", "b", "c"], ["d", "e", "f"], ["g"]]

assertEqual
  (debug "perm")
  (filterPerm 2 ["a", "b", "c", "d"])
  [ ["a", "b"]
  , ["a", "c"]
  , ["b", "a"]
  , ["a", "d"]
  , ["b", "c"]
  , ["c", "a"]
  , ["b", "d"]
  , ["c", "b"]
  , ["d", "a"]
  , ["c", "d"]
  , ["d", "b"]
  , ["d", "c"] ]

assertEqual
  (debug "stairl")
  (filterStairl [] ["a", "b", "c", "d"])
  [["a"], ["a", "b"], ["a", "b", "c"], ["a", "b", "c", "d"]]

assertEqual
  (debug "stairr")
  (filterStairr [] ["a", "b", "c", "d"])
  [["d"], ["c", "d"], ["b", "c", "d"], ["a", "b", "c", "d"]]

assertEqual
  (debug "sublist")
  (filterSublist [] ["a", "b", "c", "d"])
  [ ["a"]
  , ["a", "b"]
  , ["b"]
  , ["a", "b", "c"]
  , ["b", "c"]
  , ["c"]
  , ["a", "b", "c", "d"]
  , ["b", "c", "d"]
  , ["c", "d"]
  , ["d"] ]

assertEqual
  (debug "subset")
  (filterSubset [] ["a", "b", "c", "d"])
  [ ["a"]
  , ["b"]
  , ["c"]
  , ["d"]
  , ["a", "b"]
  , ["a", "c"]
  , ["b", "c"]
  , ["a", "d"]
  , ["b", "d"]
  , ["c", "d"]
  , ["a", "b", "c"]
  , ["a", "b", "d"]
  , ["a", "c", "d"]
  , ["b", "c", "d"]
  , ["a", "b", "c", "d"] ]

assertEqual
  (debug "takel")
  (filterTakel 4 ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["aba", "bab", "cbc", "afe"]]

assertEqual
  (debug "taker")
  (filterTaker 4 ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["g4a", "gda", "bbf", "cac"]]

assertEqual
  (debug "takelx -- case 1")
  (filterTakelx "c.c" ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["aba", "bab", "cbc"]]

assertEqual
  (debug "takelx -- case 2")
  (filterTakelx "h.*" ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [[]]

assertEqual
  (debug "takerx -- case 1")
  (filterTakerx "g.a" ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["gda", "bbf", "cac"]]

assertEqual
  (debug "takerx -- case 2")
  (filterTakerx "h.*" ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [[]]

assertEqual
  (debug "dropl")
  (filterDropl 4 ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["g4a", "gda", "bbf", "cac"]]

assertEqual
  (debug "dropr")
  (filterDropr 4 ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["aba", "bab", "cbc", "afe"]]

assertEqual
  (debug "zrep -- case 1")
  (filterZrep "^1" ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])
  [["1", "10"]]

assertEqual
  (debug "zrep -- case 2")
  (filterZrep "^a$" ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])
  [[]]

assertEqual
  (debug "zrep -- case 3")
  (filterZrep "a$" ["aba", "bab", "cbc", "afe", "g4a", "gda", "bbf", "cac"])
  [["aba", "g4a", "gda"]]

assertEqual
  (debug "zniq -- case 1")
  (filterZniq () ["aaa", "bbb", "ccc", "aaa", "bbb"])
  [["aaa", "bbb", "ccc"]]

assertEqual (debug "zniq -- case 2") (filterZniq () ["aaa"]) [["aaa"]]

assertEqual
  (debug "wrap -- case 1")
  (filterWrap "<script>*</script>" ["aaa", "bbb", "ccc"])
  [["<script>aaa</script>", "<script>bbb</script>", "<script>ccc</script>"]]

assertEqual
  (debug "wrap -- case 2")
  (filterWrap "<script>*" ["aaa", "bbb", "ccc"])
  [["<script>aaa", "<script>bbb", "<script>ccc"]]

assertEqual
  (debug "nestl -- case 1")
  (filterNestl "<script>*</script>" ["aaa", "bbb", "ccc"])
  [ [ "<script>"
  , "<script>"
  , "<script>"
  , "aaa"
  , "</script>"
  , "bbb"
  , "</script>"
  , "ccc"
  , "</script>" ] ]

assertEqual
  (debug "nestr -- case 1")
  (filterNestr "<script>*</script>" ["aaa", "bbb", "ccc"])
  [ [ "<script>"
  , "aaa"
  , "<script>"
  , "bbb"
  , "<script>"
  , "ccc"
  , "</script>"
  , "</script>"
  , "</script>" ] ]

assertEqual
  (debug "mirror")
  (filterMirror () ["a", "b", "c", "d"])
  [["d", "c", "b", "a"]]

assertEqual
  (debug "obrev")
  (filterObrev () ["a", "b", "c", "d"])
  [["a", "b", "c", "d"], ["d", "c", "b", "a"]]

assertEqual
  (debug "equalized-partition-nums -- case 1")
  (equalizedPartitionNums 100 6)
  [17, 17, 17, 17, 16, 16]

assertEqual
  (debug "equalized-partition-nums -- case 2")
  (equalizedPartitionNums 100 10)
  [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

assertEqual
  (debug "equalized-partition-nums -- case 3")
  (equalizedPartitionNums 3 6)
  [1, 1, 1, 0, 0, 0]

assertEqual
  (debug "filter-slit -- case 1")
  (filterSlit 4 ["A", "B", "C", "D", "E", "F", "G", "H", "I"])
  [["A", "B", "C"], ["D", "E"], ["F", "G"], ["H", "I"]]

assertEqual
  (debug "filter-slit -- case 2")
  (filterSlit 2 ["a", "b", "c", "d", "e", "f", "g"])
  [["a", "b", "c", "d"], ["e", "f", "g"]]

assertEqual
  (debug "filter-slit -- case 3")
  (filterSlit 3 ["a", "b", "c", "d", "e", "f", "g"])
  [["a", "b", "c"], ["d", "e"], ["f", "g"]]
